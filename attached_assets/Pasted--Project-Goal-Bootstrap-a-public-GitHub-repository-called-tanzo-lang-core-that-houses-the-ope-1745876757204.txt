# ✨ Project Goal
Bootstrap a public GitHub repository called **tanzo-lang-core** that houses the open JSON‑Schema spec (“TanzoLang”), helper SDK stubs, and CLI tooling for the Tomodaichi Tanzo ecosystem.

# 🗂️  Directory Layout (match exact paths)
/spec/                 → canonical tanzo-schema.json + yaml dialect
/examples/             → Kai_profile.yaml, digital_archetype_only.yaml
/clients/python/       → pip‑installable package using pydantic
/clients/typescript/   → npm package using zod types
/cli/                  → tanzo-cli.py  (validate, simulate, export)
/tests/                → pytest suite covering schema validation & CLI
/.github/workflows/    → ci.yml  (pytest + black + mypy)
/docs/                 → mkdocs site (spec auto‑rendered)
LICENSE                → Apache‑2.0
README.md              → shields, install, quick‑start
CONTRIBUTING.md        → branch naming, pre‑commit, conventional commits
CODE_OF_CONDUCT.md     → adapted Contributor Covenant v2.1

# 🧰  Tech Stack
* **Python 3.11** + **Poetry** for packaging
* **Pydantic v2** for schema classes
* **Click** for CLI UX
* **jsonschema** for validation
* **black/mypy/isort/ruff** pre‑commit hooks (identical to gptoggle‑core)
* **pytest‑cov** for coverage ≥ 90 %
* **MkDocs Material** for docs‑site; deploy via GitHub Pages
* **Semantic‑release** GitHub Action for auto‑versioning & changelog

# 🔧  Required Tasks
1. **Create repo** `tanzo-lang-core` in the onalius org (private=false).
2. **Generate all files & directories** above. Initialise poetry project `tanzo_schema`.
3. **Implement tanzo-schema.json** per current TanzoLang draft; add `$schema`, `$id`, definitions, examples.
4. **Write tanzo-cli.py** with sub‑commands:
   - `validate <file>`   → validates profile.
   - `simulate <file>`   → Monte‑Carlo trial (100 iterations) → stdout summary.
   - `export <file>`     → prints shorthand string.
5. **Write tests** for each CLI sub‑command using example profiles.
6. **Set up CI**: on `pull_request` run style, mypy, pytest; on `main` push run semantic‑release.
7. **Add badges** (CI, coverage, PyPI) in README.
8. **Copy lint & pre‑commit settings** from gptoggle‑core.
9. **Publish**: first semantic version tag `v0.1.0`. Push to GitHub, trigger CI, confirm green.
10. **Open a PR** to add the repo link to a new section “Ecosystem Modules” in gptoggle‑core README.

# ✅  Definition of Done
* Repo visible at `github.com/onalius/tanzo-lang-core`.
* `poetry install && poetry run tanzo-cli validate examples/Kai_profile.yaml` exits 0.
* `pytest` passes; coverage ≥ 90 %.
* Docs build at `https://onalius.github.io/tanzo-lang-core/`.
* README showcases quick‑start + shields; license & contributing present.